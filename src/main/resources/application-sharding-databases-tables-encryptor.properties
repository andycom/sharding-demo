#############################################
#               数据脱敏示例
#############################################

# 数据源名称，多数据源以逗号分隔
spring.shardingsphere.datasource.names=ds0

# 数据源配置
spring.shardingsphere.datasource.ds0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds0.url=jdbc:mysql://localhost:3306/db_00?useUnicode=true&characterEncoding=utf-8&serverTimezone=GMT%2B8
spring.shardingsphere.datasource.ds0.username=share
spring.shardingsphere.datasource.ds0.password=hta@123

spring.shardingsphere.encrypt.encryptors.encryptor_aes.type=aes
spring.shardingsphere.encrypt.encryptors.encryptor_aes.props.aes.key.value=123456

# 明文列命名为 plainColumn,密文列命名为 cipherColumn
# 将user_id作为明文，remark作为密文
spring.shardingsphere.encrypt.tables.t_order.columns.user_id.plainColumn=user_id
spring.shardingsphere.encrypt.tables.t_order.columns.user_id.cipherColumn=remark
spring.shardingsphere.encrypt.tables.t_order.columns.user_id.encryptor=encryptor_aes
# ShardingSphere 还提供了一个属性开关，当底层数据库表里同时存储了明文和密文数据后，该属性开关可以决定是直接查询数据库表里的明文数据进行返回，还是查询密文数据并进行解密之后再返回
spring.shardingsphere.props.query.with.cipher.column=true

# 配置数据脱敏时，主键生成策略会失效
#spring.shardingsphere.sharding.tables.t_order.key-generator.column=id
#spring.shardingsphere.sharding.tables.t_order.key-generator.type=SNOWFLAKE
#spring.shardingsphere.sharding.tables.t_order.key-generator.props.worker.id=33




